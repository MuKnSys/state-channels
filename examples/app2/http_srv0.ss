(import ./http)
(import ../../src/cli)
(import ../../src/apimon)

;; Server 0
(apimon "doesNotUnderstand" (=> (CMD PARM)
                              (outraw "Doesn't understand")
                              (cr)
                              (outraw "<= ")(outraw CMD)(outraw " ")(outraw (json-serialize PARM))
                              (cr)1235)
                            '(any any))
(define (handler MSG)
  (define (exec MSG)
    (define TAG (: MSG '_))
    (define PARM (: MSG 'PARM))
    (cond ((specified? TAG)
           (^ 'cmd APIMON TAG PARM))
          (else
           (rexpr Void '(_ "unknown" A 1)))))
  (if (rexpr? MSG)
    (exec MSG)
    (if (pair? MSG)
      (map exec MSG)
      (rexpr Void '(_ "unknown" B 2)))))

;; Routing tables
(define _HOST (rexpr Void '()))
(define _PROCH (rexpr Void '()))
(define _PROCL (rexpr Void '()))
(define _MSGS (queue))

(define (enter-host UIDH)
  (:= _HOST (sy UIDH) (empty)))

(define (enter-proc UID UIDH)
  (if (specified? UIDH)
    (rpush (: _HOST (sy UIDH)) UID))
  (:= _PROCH (sy UID) UIDH)
  (:= _PROCL (sy UID) (empty)))

(define (proc-msg MSG)
  (define UID Void)
  (define PRE Void)
  (set! UID (: MSG 'TO))
  (set! PRE (: _PROCL (sy UID)))
  (if (unspecified? PRE)
    (enter-proc UID Void))
  (rpush (: _PROCL (sy UID)) MSG))

(define (host-poll UIDH)
  (define PROCS (: _HOST (sy UIDH)))
  (define RES '())
  (define L Void)
  (define OUTS '())
 ;(>> PROCS)
 ;(cr)
  (if (pair? PROCS)
    (begin
      (for-each (=> (UID)
                  (set! L (: _PROCL (sy UID)))
                 ;(>> L)
                 ;(cr)
                  (if (not (boxed-empty? L))
                    (begin
                      (set! OUTS (cons UID OUTS))
                      (for-each (=> (MSG)
                                 ;(>> MSG)
                                 ;(cr)
                                  (set! RES (cons MSG RES)))
                                L)
                      (:= _PROCL (sy UID) (empty))
                      Void)))
                PROCS)
      (if (not (empty? OUTS))
        (begin
           (outraw* "poll! " UIDH)
           (cr)
           (for-each (=> (UID)
                       (outraw* "fetch " UID)
                       (cr))
                     (reverse OUTS))))))
  (reverse RES))

;; Start
(apimon "cr" (=> () (cr)) '())
(apimon "func1" (=> (N S)
                  (out N)(spc)(out S)
                  (cr)
                  123456)
                '(num str))

(apimon "enter-host" (=> (UIDH)
                       (outraw* "host! " UIDH)
                       (cr)
                       (enter-host UIDH))
                     '(str))
(apimon "net-enter" (=> (UIDP UIDH)
                      (outraw* "proc! " UIDP " on " UIDH)
                      (cr)
                      (enter-proc UIDP UIDH))
                    '(str str))
(apimon "net-send" (=> (MSG)
                     (outraw "send  ")
                    ;(>> MSG)(cr)
                     (outraw (json-serialize MSG))
                     (cr)
                     (proc-msg MSG))
                   '(str))
(apimon "poll" (=> (UIDH)
                 (host-poll UIDH))
               '(str))
(apimon "status" (=> ()
                   (>> _HOST)(cr)
                   (>> _PROCH)(cr)
                   (>> _PROCL)(cr)
                 Void)
               '())

(init0) ;; NOTE: to be able to use sc lib (not mandatory)
(http-srv "127.0.0.1:1234" handler)
